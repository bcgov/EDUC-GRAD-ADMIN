name: Build & Deploy Backend-DEV

env:
  # 🖊️ EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # 🖊️ EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: bbe4c3-dev

  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  IMAGE_NAME: educ-grad-admin-backend
  DOCKER_ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca/docker-remote
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca

  REPO_NAME: "educ-grad-admin"
  BRANCH: "main"
  APP_NAME_BACKEND: "educ-grad-admin-backend"
  NAMESPACE: bbe4c3
  NAMESPACE_TOOLS: bbe4c3-tools
  COMMON_NAMESPACE: 75e61b
  TAG: "latest"
  TARGET_ENV: "dev"

  MIN_CPU: "50m"
  MAX_CPU: "100m"
  MIN_MEM: "200Mi"
  MAX_MEM: "250Mi"
  MIN_REPLICAS: "1"
  MAX_REPLICAS: "2"

  # SITE_URL should have no scheme or port. It will be prepended with https://
  HOST_ROUTE: "educ-grad-admin-bbe4c3-dev.apps.silver.devops.gov.bc.ca"

on:
  workflow_dispatch:

jobs:
  openshift-ci-cd:
    name: Build & Deploy Backend to DEV
    # ubuntu-latest can also be used.
    runs-on: ubuntu-22.04
    environment: dev

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v4
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };

            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;
            });

            if (missingSecrets.length > 0) {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`✅ All the required secrets are set`);
            }

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Determine app name
        if: env.APP_NAME_BACKEND == ''
        run: |
          echo "APP_NAME_BACKEND=$(basename $PWD)" | tee -a $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_ARTIFACTORY_REPO }}
          username: ${{ secrets.DOCKER_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.DOCKER_ARTIFACTORY_ACCESS_TOKEN }}

      # https://github.com/redhat-actions/buildah-build#readme
      - name: Build backend from Dockerfile
        id: build-image-backend
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME_BACKEND }}
          tags: "latest"

          # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
          # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
          # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
          dockerfiles: |
            ./backend/Dockerfile
          context: ./backend

        # https://github.com/redhat-actions/push-to-registry#readme
      - name: Push backend to registry
        id: push-image-backend
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image-backend.outputs.image }}
          tags: ${{ steps.build-image-backend.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

        # https://github.com/redhat-actions/oc-login#readme
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
          oc project ${{ env.OPENSHIFT_NAMESPACE }}
          # Cancel any rollouts in progress
          oc rollout cancel deployment/${{ env.IMAGE_NAME }} 2> /dev/null \
          || true && echo "No rollout in progress"

          oc project ${{ env.OPENSHIFT_NAMESPACE }}

          # Create the image stream if it doesn't exist
          oc create imagestream ${{ env.REPO_NAME }}-backend 2> /dev/null || true && echo "Backend image stream in place"

          oc tag ${{ steps.push-image-backend.outputs.registry-path }} ${{ env.REPO_NAME }}-backend:${{ env.TAG }}

          # Process template
          oc process -f tools/openshift/backend-dc.yaml \
          -p IS_NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} \
          -p REPO_NAME=${{ env.REPO_NAME }} \
          -p HOST_ROUTE=${{ env.HOST_ROUTE }} \
          -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} \
          -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} \
          -p MIN_CPU=${{ env.MIN_CPU }} \
          -p MAX_CPU=${{ env.MAX_CPU }} \
          -p MIN_MEM=${{ env.MIN_MEM }} \
          -p MAX_MEM=${{ env.MAX_MEM }} \
          -p BASE_URL=${{ env.TARGET_ENV }}.grad.gov.bc.ca \
          -p ENVIRONMENT=${{ env.TARGET_ENV }} \
          -p CERTIFICATE="${{ secrets.CERTIFICATE }}" \
          -p CA_CERT="${{ secrets.CA_CERT }}" \
          -p PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" \
          | oc apply -n ${{ env.OPENSHIFT_NAMESPACE }} -f -

          # Start rollout (if necessary) and follow it
          oc rollout restart deployment/${{ env.IMAGE_NAME }} 

          # Get status, returns 0 if rollout is successful
          oc rollout status deployment/${{ env.IMAGE_NAME }}

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'https://educ-grad-admin-${{ env.OPENSHIFT_NAMESPACE }}.apps.silver.devops.gov.bc.ca'
