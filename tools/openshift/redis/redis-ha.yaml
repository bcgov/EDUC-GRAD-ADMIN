---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: "redis-template"
metadata:
  name: "redis-template"
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: redis-ha
      labels:
        app: redis-ha
    data:
      fix-ip.sh: |
        #!/bin/sh
        CLUSTER_CONFIG="/data/nodes.conf"
        if [ -f ${CLUSTER_CONFIG} ]; then
          if [ -z "${POD_IP}" ]; then
            echo "Unable to determine Pod IP address!"
            exit 1
          fi
          echo "Updating my IP to ${POD_IP} in ${CLUSTER_CONFIG}"
          sed -i.bak -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${CLUSTER_CONFIG}
        fi
        exec "$@"
      redis.conf: |
        cluster-enabled yes
        cluster-require-full-coverage no
        cluster-node-timeout 15000
        cluster-config-file /data/nodes.conf
        cluster-migration-barrier 1
        appendonly yes
        protected-mode no
      redis-readiness.sh: |
        #!/bin/sh
        response=$(timeout 3 $1 redis-cli -h $HOSTNAME -p 6379 ping)
        if [ "$response" != "PONG" ]; then
          echo "$response"
          exit 1
        fi
      redis-liveness.sh: |
        #!/bin/sh
        response=$(timeout 3 $1 redis-cli -h $HOSTNAME -p 6379 ping)
        if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
          echo "$response"
          exit 1
        fi
  - apiVersion: v1
    kind: Service
    metadata:
      name: redis-ha
      labels:
        app: redis-ha
    spec:
      ports:
        - port: 6379
          targetPort: 6379
          name: client
        - port: 16379
          targetPort: 16379
          name: gossip
      clusterIP: None
      selector:
        app: redis-ha
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: redis-ha
      labels:
        app: redis-ha
    spec:
      serviceName: redis-ha
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app: redis-ha
      template:
        metadata:
          labels:
            app: redis-ha
        spec:
          containers:
            - name: redis-ha
              image: ghcr.io/bcgov/educ-grad-tools/tini-redis:7.0.8
              ports:
                - containerPort: 6379
                  name: client
                - containerPort: 16379
                  name: gossip
              command: [ "/usr/bin/tini", "--", "/conf/fix-ip.sh", "redis-server", "/conf/redis.conf" ]
              readinessProbe:
                exec:
                  command: ["/conf/redis-readiness.sh"]
                enabled: true
                initialDelaySeconds: 20
                periodSeconds: 5
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              livenessProbe:
                exec:
                  command: ["/conf/redis-liveness.sh"]
                enabled: true
                initialDelaySeconds: 20
                periodSeconds: 5
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 5
              env:
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
              volumeMounts:
                - name: conf
                  mountPath: /conf
                  readOnly: false
                - name: data
                  mountPath: /data
                  readOnly: false
              resources:
                requests:
                  cpu: "50m"
                  memory: "256Mi"
                limits:
                  cpu: "200m"
                  memory: "512Mi"
          volumes:
            - name: conf
              configMap:
                name: redis-ha
                defaultMode: 0755
      volumeClaimTemplates:
        - metadata:
            name: data
            labels:
              name: redis-ha
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: "100Mi"
parameters:
  - name: REPLICAS
    description: Number of Replicas for the Redis cluster
    required: true
    value: "2"